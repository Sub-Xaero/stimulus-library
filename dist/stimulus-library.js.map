{"version":3,"file":"stimulus-library.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/disable_with_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  get el(): HTMLElement {\n    return this.element as HTMLElement;\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {}) {\n    let mergedOptions = Object.assign({}, {bubbles: true, cancelable: true, detail: {target: element}}, options);\n    if (!!mergedOptions.detail.target) {\n      mergedOptions.detail.target = element;\n    }\n    let event = new CustomEvent(eventName, mergedOptions);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"el\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.el, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.el, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility() {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let self = this;\n    let el = this.hasReplaceTarget ? this.replaceTarget : this.el;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      self.dispatch(el, \"ajax:success\");\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n      self.dispatch(el, \"ajax:error\");\n    })\n    .finally(() => {\n      self.dispatch(el, \"ajax:complete\");\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  initialize() {\n    this.handler = this.handler.bind(this);\n  }\n\n  connect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.handler));\n  }\n\n  disconnect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.handler));\n  }\n\n  private handler(e: Event) {\n    // Trigger synthetic \"submit\" event on form\n    this.dispatch((this.el), \"submit\");\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  initialize() {\n    this._handler = this._handler.bind(this);\n  }\n\n  connect() {\n    let target = this.el as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this._handler);\n    target.addEventListener(\"focus\", this._handler);\n    useWindowResize(this);\n    requestAnimationFrame(this._handler);\n  }\n\n  windowResize() {\n    this._handler();\n  }\n\n  private _handler() {\n    this.autosize(this.el as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this._updateCharCount = this._updateCharCount.bind(this);\n  }\n\n  connect() {\n    this._updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this._updateCharCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this._updateCharCount);\n  }\n\n  private _updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this._isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  private _isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"LINK\";\n}\n\nexport function isHTMLAnchorElement(element: Element): element is HTMLAnchorElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLButtonElement(element: Element): element is HTMLButtonElement {\n  return element.nodeName == \"BUTTON\";\n}\n\nexport function isHTMLSelectElement(element: Element): element is HTMLSelectElement {\n  return element.nodeName == \"SELECT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLAnchorElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.el;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLAnchorElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.el, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {_message: String};\n\n  declare readonly _messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get _message(): string {\n    return this.hasMessageValue ? this._messageValue : \"Do you want to leave this page? Changes you made may not be saved\";\n  }\n\n  initialize() {\n    this.handlePopstate = this.handlePopstate.bind(this);\n    this.handleTurboNavigation = this.handleTurboNavigation.bind(this);\n  }\n\n  connect() {\n    window.onbeforeunload = () => this._message;\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    window.addEventListener(\"turbolinks:before-visit\", this.handleTurboNavigation);\n    window.addEventListener(\"turbo:before-visit\", this.handleTurboNavigation);\n  }\n\n  handlePopstate(_event: PopStateEvent) {\n    return false;\n  }\n\n  handleTurboNavigation(event: Event) {\n    if (!confirm(this._message)) {\n      event.preventDefault();\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\n\nexport class DetectDirtyController extends BaseController {\n\n  loadValue: null | string | boolean = null;\n\n  initialize() {\n    this.checkDirty = this.checkDirty.bind(this);\n  }\n\n  connect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (isElementCheckable(element)) {\n      this.loadValue = element.checked;\n    } else {\n      this.loadValue = element.value;\n    }\n    this.checkDirty();\n    element.addEventListener(\"input\", this.checkDirty);\n    element.addEventListener(\"change\", this.checkDirty);\n  }\n\n  disconnect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this.checkDirty);\n    element.removeEventListener(\"change\", this.checkDirty);\n  }\n\n  restore() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (isElementCheckable(element)) {\n      element.checked = element.defaultChecked;\n    } else if (isHTMLSelectElement(element)) {\n      let options = Array.from(element.options);\n      if (options.every(option => !option.defaultSelected)) {\n        options.forEach((option) => {\n          option.selected = option.value == this.loadValue;\n        });\n      } else {\n        options.forEach((option) => option.selected = option.defaultSelected);\n      }\n      Array.from(element.options).forEach(option => option.selected = option.defaultSelected);\n    } else {\n      element.value = element.defaultValue;\n    }\n  }\n\n  private checkDirty(_event?: Event) {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    let dirty: boolean;\n    if (isElementCheckable(element)) {\n      dirty = element.checked != element.defaultChecked;\n    } else if (isHTMLSelectElement(element)) {\n      let options = Array.from(element.options);\n      if (options.every(option => !option.defaultSelected)) {\n        dirty = element.value != this.loadValue;\n      } else {\n        dirty = options.some((option) => option.selected != option.defaultSelected);\n      }\n    } else {\n      dirty = element.value != element.defaultValue;\n    }\n\n    if (dirty) {\n      element.setAttribute(\"data-dirty\", \"true\");\n    } else {\n      element.removeAttribute(\"data-dirty\");\n    }\n  }\n\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from './base_controller';\nimport {isHTMLAnchorElement, isHTMLButtonElement, isHTMLInputElement} from \"./utilities/elements\";\n\nexport class DisableWithController extends BaseController {\n\n  static values = {\n    message: String,\n    timeout: Number,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n  declare readonly timeoutValue: number;\n  declare readonly hasTimeoutValue: boolean;\n\n  _cacheText?: string;\n  _timeoutHandle?: ReturnType<typeof window.setTimeout>;\n\n  get _message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Submitting...';\n  }\n\n  get _timeout(): number {\n    return this.hasTimeoutValue ? this.timeoutValue : 1000;\n  }\n\n  initialize() {\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      this.el.addEventListener(\"click\", this.disable);\n    });\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  disable(event?: Event) {\n    let element = this.el;\n\n    if (this._isDisabled(element)) {\n      event?.preventDefault();\n      event?.stopImmediatePropagation();\n    } else {\n      this._cacheText = this._getElText(element);\n      this._setElText(element, this._message);\n      this._disable(element);\n      setTimeout(this.enable, this._timeout);\n    }\n  }\n\n  enable(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    if (this._isDisabled(element)) {\n      this._setElText(element, this._cacheText!);\n      this._enable(element);\n    }\n  }\n\n  _isDisabled(el: HTMLElement): boolean {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      return el.disabled;\n    } else {\n      return el.dataset.disabled == \"true\";\n    }\n  }\n\n  _getElText(el: HTMLElement): string {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      return el.value;\n    } else {\n      return el.innerText;\n    }\n  }\n\n  _setElText(el: HTMLElement, str: string) {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      el.value = str;\n    } else if (isHTMLButtonElement(el) || isHTMLAnchorElement(el)) {\n      el.innerText = str;\n    }\n  }\n\n  _disable(el: HTMLElement) {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      el.disabled = true;\n    } else {\n      el.dataset.disabled = \"true\";\n    }\n  }\n\n  _enable(el: HTMLElement) {\n    if (isHTMLInputElement(el) && el.type == \"submit\" || isHTMLButtonElement(el)) {\n      el.disabled = false;\n    } else {\n      el.dataset.disabled = undefined;\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.el.remove();\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  get emptyClasses(): string[] {\n    return this.emptyClass.split(\" \");\n  }\n\n  get notEmptyClasses(): string[] {\n    return this.notEmptyClass.split(\" \");\n  }\n\n  get children(): Element[] {\n    let element = this.el;\n    if (this.hasScopeSelectorValue) {\n      return Array.from(element.querySelectorAll(this.scopeSelectorValue));\n    } else {\n      return Array.from(element.children);\n    }\n  }\n\n  connect() {\n    useMutation(this, {element: this.el, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let element = this.el;\n    let children = this.children;\n    if (children.length === 0) {\n      this._removeNotEmptyClasses();\n      this._addEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:empty\");\n    } else {\n      this._addNotEmptyClasses();\n      this._removeEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:not-empty\", {detail: {count: children.length}});\n    }\n  }\n\n  private _removeEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.remove(...this.emptyClasses);\n    }\n  }\n\n  private _addNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.add(...this.notEmptyClasses);\n    }\n  }\n\n  private _addEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.add(...this.emptyClasses);\n    }\n  }\n\n  private _removeNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.remove(...this.notEmptyClasses);\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.el as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.el as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.el as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.el;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.el.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.el.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.el, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    event?.preventDefault();\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.el, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault();\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.el, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.el, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.el,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:appear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:disappear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.el;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.el && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.el as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.el as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.el as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.el as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.el, {behavior: \"smooth\", block: \"end\"}).catch(() => this.el.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  initialize() {\n    this.handleInputs = this.handleInputs.bind(this);\n  }\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.handleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.handleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      this.dispatch(target, \"change\");\n      this.dispatch(target, \"limited-selection:too-many\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      this.dispatch(target, \"limited-selection:selection\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    event?.preventDefault();\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  initialize() {\n    this.checkPasswordsMatch = this.checkPasswordsMatch.bind(this);\n  }\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  private allPasswordsMatch(): boolean {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.el;\n    if (this.allPasswordsMatch()) {\n      this.dispatch(element, \"password-confirm:match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.dispatch(element, \"password-confirm:no-match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  initialize() {\n    this.messageReceived = this.messageReceived.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"message\", this.messageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.messageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.el as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.el);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.el,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.el.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof window.setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.el.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.el.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.el.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.dispatch(element, \"teleport:error\");\n      return;\n    }\n\n    let copy = element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLAnchorElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event) {\n    event?.preventDefault();\n    this._setSrc();\n  }\n\n  clear(event?: Event) {\n    event?.preventDefault();\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.el;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLAnchorElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this.updateWordCount = this.updateWordCount.bind(this);\n  }\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.updateWordCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.updateWordCount);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","mergedOptions","Object","assign","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","this","application","debug","logger","console","groupCollapsed","identifier","groupEnd","Controller","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","el","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","loadContent","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","err","_errorMessage","hasErrorMessageValue","errorMessageValue","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","_this2","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","super","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","_handler","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","_updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","_isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasSelectAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLAnchorElement","nodeName","isHTMLFormElement","isHTMLInputElement","isHTMLButtonElement","isHTMLSelectElement","isElementCheckable","removeUnused","Boolean","ConfirmController","confirm","Error","message","hasMessageValue","messageValue","ConfirmNavigationController","handlePopstate","handleTurboNavigation","onbeforeunload","_message","_event","_messageValue","DebugController","testTargets","DetectDirtyController","checkDirty","loadValue","restore","defaultChecked","Array","from","every","option","defaultSelected","selected","defaultValue","dirty","some","setAttribute","removeAttribute","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DisableWithController","enable","disable","_timeoutHandle","_isDisabled","stopImmediatePropagation","_cacheText","_getElText","_setElText","_disable","_timeout","_enable","str","undefined","hasTimeoutValue","timeoutValue","timeout","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","_removeNotEmptyClasses","_addEmptyClasses","_addNotEmptyClasses","_removeEmptyClasses","hasEmptyClass","emptyClasses","hasNotEmptyClass","notEmptyClasses","emptyClass","split","notEmptyClass","hasScopeSelectorValue","scopeSelectorValue","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","_clear","restoreOnLoad","clearOnSubmit","localStorage","removeItem","formIdentifier","save","setItem","JSON","stringify","formData","getItem","savedData","parse","formElements","hasIdValue","idValue","elementID","location","href","formID","elements","data","hasRestoreOnLoadValue","restoreOnLoadValue","hasClearOnSubmitValue","clearOnSubmitValue","IntersectionController","threshold","disappear","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","LazyBlockController","smoothPolyfilled","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","Promise","polyfill","polyfillSmooth","documentElement","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","open","close","_dialog","image","className","imageClassName","srcset","srcSet","sizes","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","modalClassName","showModal","_this3","hasSrcValue","srcValue","hasSrcSetValue","srcSetValue","hasSizesValue","sizesValue","hasModalClass","modalClass","hasImageClass","imageClass","LimitedSelectionCheckboxesController","handleInputs","inputTargets","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","secondsValue","seconds","StickyController","createMagicElement","_magicElement","_mode","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","initialValue","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this4","_this5","toggled","classValue","klass","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match","isValidCount"],"mappings":"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"}