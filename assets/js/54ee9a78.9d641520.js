"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[157],{3704:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=r(4848),t=r(8453);const i={id:"useResizeObserver",title:"useResizeObserver"},o=void 0,d={id:"mixins/useResizeObserver",title:"useResizeObserver",description:"Purpose",source:"@site/docs/mixins/use_resize_observer.mdx",sourceDirName:"mixins",slug:"/mixins/useResizeObserver",permalink:"/stimulus-library/docs/mixins/useResizeObserver",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"useResizeObserver",title:"useResizeObserver"},sidebar:"DocsSidebar",previous:{title:"useMutationObserver",permalink:"/stimulus-library/docs/mixins/useMutationObserver"},next:{title:"useTemporaryContent",permalink:"/stimulus-library/docs/mixins/useTemporaryContent"}},c={},l=[{value:"Purpose",id:"purpose",level:2},{value:"Side Effects",id:"side-effects",level:2},{value:"Usage",id:"usage",level:2},{value:"useResizeObserver",id:"useresizeobserver",level:3}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"purpose",children:"Purpose"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"useResizeObserver"})," hook allows you to observe when elements change size.\r\nIt is a wrapper around the ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver",children:"ResizeObserver API"}),",\r\nmaking it easier to use in Stimulus components and automating registering and cleaning up the observer on connect and disconnect."]}),"\n",(0,n.jsx)(s.h2,{id:"side-effects",children:"Side Effects"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"useResizeObserver"})," hook will create an instance of ",(0,n.jsx)(s.code,{children:"ResizeObserver"})," when it is called, and registers the observer with the DOM, observing the element passed in."]}),"\n",(0,n.jsx)(s.p,{children:"When the component is unmounted, the observer will be disconnected and cleaned up."}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(s.h3,{id:"useresizeobserver",children:"useResizeObserver"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameters"}),(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Purpose"}),(0,n.jsx)(s.th,{children:"Default"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"controller"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"Controller"})}),(0,n.jsxs)(s.td,{children:["The instance of the controller to install the behaviour on. This allows the mixin to automatically register cleanup on the controller's ",(0,n.jsx)(s.code,{children:"disconnect"}),"."]}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"this"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"element"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"HTMLElement"})}),(0,n.jsx)(s.td,{children:"The element to observe."}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"handler"}),"  (Optional)"]}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"Function"})}),(0,n.jsxs)(s.td,{children:["The callback to invoke when the changes occur. Accepts a single parameter which is an array of ",(0,n.jsx)(s.code,{children:"ResizeObserverEntry"})," ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry",children:"Reference"}),"."]}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"options"})," (Optional)"]}),(0,n.jsx)(s.td,{}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"ResizeObserverOptions"})," ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe",children:"Reference"})]}),(0,n.jsxs)(s.td,{children:["The raw options to pass to to the ",(0,n.jsx)(s.code,{children:"observe"})," call when initializing the ResizeObserver"]}),(0,n.jsx)(s.td,{})]})]})]})]})}function a(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>d});var n=r(6540);const t={},i=n.createContext(t);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);