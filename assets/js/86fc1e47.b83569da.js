"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[5393],{7732:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"mixins/useMutationObserver","title":"useMutationObserver","description":"Purpose","source":"@site/docs/mixins/use_mutation_observer.mdx","sourceDirName":"mixins","slug":"/mixins/useMutationObserver","permalink":"/stimulus-library/docs/mixins/useMutationObserver","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"useMutationObserver","title":"useMutationObserver"},"sidebar":"DocsSidebar","previous":{"title":"useLocalStorage","permalink":"/stimulus-library/docs/mixins/useLocalStorage"},"next":{"title":"useResizeObserver","permalink":"/stimulus-library/docs/mixins/useResizeObserver"}}');var n=s(4848),i=s(8453);const o={id:"useMutationObserver",title:"useMutationObserver"},c=void 0,d={},l=[{value:"Purpose",id:"purpose",level:2},{value:"Side Effects",id:"side-effects",level:2},{value:"Usage",id:"usage",level:2},{value:"useMutationObserver",id:"usemutationobserver",level:3}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"purpose",children:"Purpose"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"useMutationObserver"})," hook allows you to observe changes to the DOM.\r\nIt is a wrapper around the ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",children:"MutationObserver API"}),",\r\nmaking it easier to use in Stimulus components and automating registering and cleaning up the observer on connect and disconnect."]}),"\n",(0,n.jsx)(t.h2,{id:"side-effects",children:"Side Effects"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"useMutationObserver"})," hook will create an instance of ",(0,n.jsx)(t.code,{children:"MutationObserver"})," when it is called. It will also register the observer with the DOM. When the component is unmounted, the observer will be disconnected."]}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.h3,{id:"usemutationobserver",children:"useMutationObserver"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameters"}),(0,n.jsx)(t.th,{}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Purpose"}),(0,n.jsx)(t.th,{children:"Default"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"controller"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Controller"})}),(0,n.jsxs)(t.td,{children:["The instance of the controller to install the behaviour on. This allows the mixin to automatically register cleanup on the controller's ",(0,n.jsx)(t.code,{children:"disconnect"}),"."]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"this"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"element"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"HTMLElement"})}),(0,n.jsx)(t.td,{children:"The element to observe."}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"handler"}),"  (Optional)"]}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Function"})}),(0,n.jsxs)(t.td,{children:["The callback to invoke when the changes occur. Accepts a single parameter which is an array of ",(0,n.jsx)(t.code,{children:"MutationRecord"})," ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord",children:"Reference"}),"."]}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"options"})," (Optional)"]}),(0,n.jsx)(t.td,{}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"MutationObserverInit"})," ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe",children:"Reference"})]}),(0,n.jsxs)(t.td,{children:["The raw options to pass to to the ",(0,n.jsx)(t.code,{children:"observe"})," call when initializing the MutationObserver"]}),(0,n.jsx)(t.td,{})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var r=s(6540);const n={},i=r.createContext(n);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);